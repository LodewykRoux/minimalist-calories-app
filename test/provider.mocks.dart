// Mocks generated by Mockito 5.4.4 from annotations
// in calories_app/test/screens/auth/login_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:collection' as _i2;
import 'dart:ui' as _i7;

import 'package:calories_app/models/daily_entry.dart' as _i9;
import 'package:calories_app/models/food_item.dart' as _i11;
import 'package:calories_app/models/user.dart' as _i5;
import 'package:calories_app/models/weight.dart' as _i13;
import 'package:calories_app/provider/daily_entry_provider.dart' as _i8;
import 'package:calories_app/provider/food_item_provider.dart' as _i10;
import 'package:calories_app/provider/user_provider.dart' as _i4;
import 'package:calories_app/provider/weight_provider.dart' as _i12;
import 'package:calories_app/service/navigation_service.dart' as _i14;
import 'package:calories_app/service/scaffold_messenger_service.dart' as _i15;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnmodifiableListView_0<E> extends _i1.SmartFake
    implements _i2.UnmodifiableListView<E> {
  _FakeUnmodifiableListView_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_1<T extends _i3.State<_i3.StatefulWidget>>
    extends _i1.SmartFake implements _i3.GlobalKey<T> {
  _FakeGlobalKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProvider extends _i1.Mock implements _i4.UserProvider {
  @override
  set user(_i5.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Future<_i5.User?> validate(String? userToken) => (super.noSuchMethod(
        Invocation.method(
          #validate,
          [userToken],
        ),
        returnValue: _i6.Future<_i5.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i5.User?>.value(),
      ) as _i6.Future<_i5.User?>);

  @override
  _i6.Future<_i5.User?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i5.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i5.User?>.value(),
      ) as _i6.Future<_i5.User?>);

  @override
  _i6.Future<_i5.User?> register(
    String? name,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i5.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i5.User?>.value(),
      ) as _i6.Future<_i5.User?>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DailyEntryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDailyEntryProvider extends _i1.Mock
    implements _i8.DailyEntryProvider {
  @override
  _i2.UnmodifiableListView<_i9.DailyEntry> get entries => (super.noSuchMethod(
        Invocation.getter(#entries),
        returnValue: _FakeUnmodifiableListView_0<_i9.DailyEntry>(
          this,
          Invocation.getter(#entries),
        ),
        returnValueForMissingStub: _FakeUnmodifiableListView_0<_i9.DailyEntry>(
          this,
          Invocation.getter(#entries),
        ),
      ) as _i2.UnmodifiableListView<_i9.DailyEntry>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void startLoading() => super.noSuchMethod(
        Invocation.method(
          #startLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLoading() => super.noSuchMethod(
        Invocation.method(
          #stopLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> save(_i9.DailyEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [entry],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(_i9.DailyEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [entry],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FoodItemProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodItemProvider extends _i1.Mock implements _i10.FoodItemProvider {
  @override
  _i2.UnmodifiableListView<_i11.FoodItem> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _FakeUnmodifiableListView_0<_i11.FoodItem>(
          this,
          Invocation.getter(#items),
        ),
        returnValueForMissingStub: _FakeUnmodifiableListView_0<_i11.FoodItem>(
          this,
          Invocation.getter(#items),
        ),
      ) as _i2.UnmodifiableListView<_i11.FoodItem>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void startLoading() => super.noSuchMethod(
        Invocation.method(
          #startLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLoading() => super.noSuchMethod(
        Invocation.method(
          #stopLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> save(_i11.FoodItem? item) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [item],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(_i11.FoodItem? item) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [item],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeightProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightProvider extends _i1.Mock implements _i12.WeightProvider {
  @override
  _i2.UnmodifiableListView<_i13.Weight> get weights => (super.noSuchMethod(
        Invocation.getter(#weights),
        returnValue: _FakeUnmodifiableListView_0<_i13.Weight>(
          this,
          Invocation.getter(#weights),
        ),
        returnValueForMissingStub: _FakeUnmodifiableListView_0<_i13.Weight>(
          this,
          Invocation.getter(#weights),
        ),
      ) as _i2.UnmodifiableListView<_i13.Weight>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get averageWeight => (super.noSuchMethod(
        Invocation.getter(#averageWeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void startLoading() => super.noSuchMethod(
        Invocation.method(
          #startLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLoading() => super.noSuchMethod(
        Invocation.method(
          #stopLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> save(_i13.Weight? weight) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [weight],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(_i13.Weight? weight) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [weight],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i14.NavigationService {
  @override
  _i3.GlobalKey<_i3.NavigatorState> get navigationKey => (super.noSuchMethod(
        Invocation.getter(#navigationKey),
        returnValue: _FakeGlobalKey_1<_i3.NavigatorState>(
          this,
          Invocation.getter(#navigationKey),
        ),
        returnValueForMissingStub: _FakeGlobalKey_1<_i3.NavigatorState>(
          this,
          Invocation.getter(#navigationKey),
        ),
      ) as _i3.GlobalKey<_i3.NavigatorState>);

  @override
  _i6.Future<T?>? pushReplacement<T extends Object, TO extends Object>(
          _i3.Widget? widget) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [widget],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Future<T?>?);

  @override
  _i6.Future<T?>? push<T extends Object>(_i3.Widget? widget) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [widget],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Future<T?>?);

  @override
  _i6.Future<T?>? pushFullscreenDialog<T extends Object>(_i3.Widget? widget) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushFullscreenDialog,
          [widget],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Future<T?>?);

  @override
  _i6.Future<T?>? pushAndReplaceAll<T extends Object>(_i3.Widget? widget) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushAndReplaceAll,
          [widget],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Future<T?>?);

  @override
  void pop<T extends Object>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ScaffoldMessengerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockScaffoldMessengerService extends _i1.Mock
    implements _i15.ScaffoldMessengerService {
  @override
  _i3.GlobalKey<_i3.ScaffoldMessengerState> get scaffoldMessengerKey =>
      (super.noSuchMethod(
        Invocation.getter(#scaffoldMessengerKey),
        returnValue: _FakeGlobalKey_1<_i3.ScaffoldMessengerState>(
          this,
          Invocation.getter(#scaffoldMessengerKey),
        ),
        returnValueForMissingStub: _FakeGlobalKey_1<_i3.ScaffoldMessengerState>(
          this,
          Invocation.getter(#scaffoldMessengerKey),
        ),
      ) as _i3.GlobalKey<_i3.ScaffoldMessengerState>);

  @override
  void displayError(String? message) => super.noSuchMethod(
        Invocation.method(
          #displayError,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void displaySuccess(String? message) => super.noSuchMethod(
        Invocation.method(
          #displaySuccess,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
